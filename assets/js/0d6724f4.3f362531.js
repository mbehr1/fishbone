"use strict";(self.webpackChunkfishbone=self.webpackChunkfishbone||[]).push([[4238],{2634:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"sequences","title":"Sequences (DLT logs based)","description":"Introduction","source":"@site/docs/sequences.md","sourceDirName":".","slug":"/sequences","permalink":"/fishbone/docs/sequences","draft":false,"unlisted":false,"editUrl":"https://github.com/mbehr1/fishbone/edit/master/docs/fishbone/docs/sequences.md","tags":[],"version":"current","frontMatter":{"id":"sequences","title":"Sequences (DLT logs based)","sidebar_label":"Sequences"},"sidebar":"fishboneSideBar","previous":{"title":"Nested fishbones","permalink":"/fishbone/docs/nestedFishbones"}}');var i=n(4848),r=n(8453);const a={id:"sequences",title:"Sequences (DLT logs based)",sidebar_label:"Sequences"},l="Sequence detection (DLT logs based)",d={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Target",id:"target",level:2},{value:"Sequence definition",id:"sequence-definition",level:2},{value:"sequence attributes",id:"sequence-attributes",level:3},{value:"<code>step</code> definition",id:"step-definition",level:3},{value:"<code>failures</code> definition",id:"failures-definition",level:3},{value:"example",id:"example",level:3},{value:"context",id:"context",level:3},{value:"REST query sequence return values",id:"rest-query-sequence-return-values",level:2},{value:"Using sequences",id:"using-sequences",level:2},{value:"full report via dlt-logs extension",id:"full-report-via-dlt-logs-extension",level:3},{value:"full report via fba-cli tool",id:"full-report-via-fba-cli-tool",level:3},{value:"Testing sequence definitions",id:"testing-sequence-definitions",level:2}];function c(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"sequence-detection-dlt-logs-based",children:"Sequence detection (DLT logs based)"})}),"\n",(0,i.jsx)(s.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(s.p,{children:["In software engineering ",(0,i.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Sequence_diagram",children:"sequence diagrams"})," are often used to describe events occurring for a specific use-case. For those events the order of occurrence from start of the use-case to the end or error cases are defined."]}),"\n",(0,i.jsx)(s.p,{children:"In the context of log analysis, a sequence typically refers to a series of related log entries that represent a specific event coming from the flow of code executed."}),"\n",(0,i.jsx)(s.p,{children:"Sequences are often used in log analysis to:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"Track the execution flow: By following a sequence of log entries, you can understand how a particular process or operation is executed within the system."}),"\n",(0,i.jsx)(s.li,{children:"Identify patterns: Sequences can help identify common patterns or behaviors in the system, which can be useful for performance optimization or troubleshooting."}),"\n",(0,i.jsx)(s.li,{children:"Detect anomalies: By comparing sequences, you can detect deviations from the expected behavior, which may indicate potential issues or errors in the system."}),"\n",(0,i.jsx)(s.li,{children:"Correlate events: Sequences can help correlate events across different components or services, providing a holistic view of the system's behavior."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"target",children:"Target"}),"\n",(0,i.jsx)(s.p,{children:"The target of sequence detection is to identify sequences for use-cases from the event logs."}),"\n",(0,i.jsx)(s.p,{children:"This eases the log based analysis for"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"faster understanding where a specific use-case failed,"}),"\n",(0,i.jsx)(s.li,{children:"confirming that the use-cases executed properly."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"sequence-definition",children:"Sequence definition"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.a,{href:"https://mbehr1.github.io/dlt-logs/",children:"dlt-logs"}),", ",(0,i.jsx)(s.a,{href:"https://github.com/mbehr1/fba-cli",children:"fba-cli"})," and fishbone extensions support ",(0,i.jsx)(s.a,{href:"/docs/badges#manual-edit-of-dlt-query",children:"REST query"})," based sequence definition."]}),"\n",(0,i.jsx)(s.h3,{id:"sequence-attributes",children:"sequence attributes"}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.code,{children:"sequence"})," is defined via the following attributes:"]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"attribute"}),(0,i.jsx)(s.th,{children:"description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"name"})}),(0,i.jsx)(s.td,{children:"Name of the sequence. Should be well defined as all sequences share the same namespace and the DLT-logs extension shows the results in the tree view under Events/Sequences/name."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"steps"})}),(0,i.jsxs)(s.td,{children:["Array with objects defining the events aka steps. Those steps are checked for being executed in order. See ",(0,i.jsx)(s.a,{href:"#step-definition",children:"step definition"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"failures"})}),(0,i.jsxs)(s.td,{children:["Object/map with filters defining a possible failure for the sequence. The object key defines the name of the failure and the key value defines the filter used to detect that. See ",(0,i.jsx)(s.a,{href:"#failures-definition",children:"failures definition"})]})]})]})]}),"\n",(0,i.jsx)(s.p,{children:"An example with one failure but without step details :"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-jsonc",metastring:"{4,5,7}",children:'/get/docs/0/filters?\nsequences=[\n  {\n    "name": "SW Update",\n    "steps":[ // array with one object per step...\n    ],\n    "failures":{\n      "crash":{ // a dlt filter definition like:\n        "type":3, // event\n        "apid":"SYS",\n        "ctid":"JOUR",\n        "payloadRegex":"^process \'.*?\' crashed"\n      }\n    }\n  }\n]\n'})}),"\n",(0,i.jsxs)(s.h3,{id:"step-definition",children:[(0,i.jsx)(s.code,{children:"step"})," definition"]}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.code,{children:"step"})," has the following attributes:"]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"attribute"}),(0,i.jsx)(s.th,{children:"description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"name"})}),(0,i.jsx)(s.td,{children:"Optional: Name of this step. If not provided name of the filter or name of the contained sequence will be used."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"card"})}),(0,i.jsxs)(s.td,{children:['Optional: Cardinality of this step. Defaults to "exactly once/mandatory step" if not provided. Can be any of:',(0,i.jsx)("br",{}),(0,i.jsx)(s.code,{children:"?"}),":zero"," or once, so an optional step,",(0,i.jsx)("br",{}),(0,i.jsx)(s.code,{children:"*"}),":any"," number of times = 0.., so an optional step that can occur not at all or any number of times",(0,i.jsx)("br",{}),(0,i.jsx)(s.code,{children:"+"}),":once"," or multiple times, so a mandatory step that can occur multiple times but at least once"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"filter"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.a,{href:"https://mbehr1.github.io/dlt-logs/docs/filterReference#details",children:"DLT filter"}),' definition. If this filter matches a msg the step is seen as "matching". Either ',(0,i.jsx)(s.code,{children:"filter"})," or ",(0,i.jsx)(s.code,{children:"sequence"})," must be provided."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"sequence"})}),(0,i.jsxs)(s.td,{children:["A definition of a ",(0,i.jsx)(s.code,{children:"sub-sequence"}),". For this step a full sequence is used. This is useful to either break down a bigger sequence into smaller parts of if this step can be executed multiple times (e.g. with ",(0,i.jsx)(s.code,{children:"card:*"}),") but consists of multiple events/steps. See ",(0,i.jsx)(s.a,{href:"#example",children:"example"}),"."]})]})]})]}),"\n",(0,i.jsx)(s.admonition,{type:"important",children:(0,i.jsx)(s.p,{children:"A step must contain either a filter or a sub-sequence but not both!"})}),"\n",(0,i.jsxs)(s.admonition,{type:"caution",children:[(0,i.jsx)(s.p,{children:"Optional steps are not allowed at the end of the sequence / end of the steps list."}),(0,i.jsxs)(s.p,{children:["The sequence will be detected with the last mandatory step as ",(0,i.jsx)(s.code,{children:"done"})," so the optional steps at the end would never be matched."]})]}),"\n",(0,i.jsxs)(s.h3,{id:"failures-definition",children:[(0,i.jsx)(s.code,{children:"failures"})," definition"]}),"\n",(0,i.jsx)(s.p,{children:"The failures attribute consists of a name/filter mapping like:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-jsonc",metastring:"{2,6}",children:'{\n  "error1": { // DLT filter definition for \'error1\'\n    "type":3,\n    // more dlt filter attributes like apid, ctid, payloadRegex\n  },\n  "error2": { // DLT filter definition for \'error2\' \n    "type":3,\n    // more dlt filter attributes...\n  }\n}\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Each failures object members is a ",(0,i.jsx)(s.a,{href:"https://mbehr1.github.io/dlt-logs/docs/filterReference#details",children:"DLT filter"})," object.\nIf this filter matches a log message the sequences is aborted with the failure name from the object key."]}),"\n",(0,i.jsx)(s.p,{children:"E.g. for"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-jsonc",metastring:"{7,8}",children:'/get/docs/0/filters?\nsequences=[\n  {\n    "name": "SW Update",\n    "steps":[ // one object per step...\n    ],\n    "failures":{\n      "crash":{ // a dlt filter definition like:\n        "type":3, // event\n        "apid":"SYS",\n        "ctid":"JOUR",\n        "payloadRegex":"^process \'.*?\' crashed"\n      }\n    }\n  }\n]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["the sequence ",(0,i.jsx)(s.code,{children:"SW Update"})," will fail with error ",(0,i.jsx)(s.code,{children:"crash"})," if a log message from ",(0,i.jsx)(s.code,{children:"SYS/JOUR"})," starting with payload \"process '...' crashed\" occurs."]}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"Only a started sequence gets aborted with any of the defined failures. If the failures occur without a started sequence they are ignored."})}),"\n",(0,i.jsx)(s.h3,{id:"example",children:"example"}),"\n",(0,i.jsx)(s.p,{children:"See here an example for a very basic flash sequence consisting of:"}),"\n",(0,i.jsx)(s.mermaid,{value:"sequenceDiagram\n    autoNumber\n    actor tester\n    participant flash\n    tester->>+flash: start of flash\n\n    loop flash of a signle image\n      tester->>flash: start image transfer\n      Note over tester, flash: transfer image data and persist\n      flash->>tester: end image transfer\n    end\n    \n    flash->>-tester: end of flash"}),"\n",(0,i.jsx)(s.p,{children:"Filters/failures are ommited."}),"\n",(0,i.jsxs)(s.p,{children:["Here ",(0,i.jsx)(s.code,{children:"sub-sequences"})," are used to ensure that if image x is flashed it's mandatory to have a start and end of the transfer."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-jsonc",metastring:"{7,11,12,13,16,20,28}",children:'/get/docs/0/filters?\nsequences=[\n  {\n    "name": "SW Update",\n    "steps":[\n      { // step 1 mandatory:\n        "name":"start of flash",\n        "filter":// filter to detect flash sequence start\n      },\n      { // step 2 multiple times \n        "card":"+", // multiple but at least 1 image needs to be flashed\n        "sequence":[\n          "name": "flash of image",\n          "steps":[\n            { // sub-step 2.1\n              "name":"transfer start",\n              "filter":// filter to detect start of transfer\n            },\n            { // sub-step 2.2 = 3\n              "name":"transfer end",\n              "filter":// filter to detect start of transfer\n            }\n          ],\n          "failures":[]\n        ]\n      },\n      { // step 3\n        "name":"end of flash",\n        "filter":// filter to detect end of flash sequence\n      },\n    ],\n    "failures:[ // ommitted here\n    ],\n  }\n]\n'})}),"\n",(0,i.jsx)(s.h3,{id:"context",children:"context"}),"\n",(0,i.jsxs)(s.p,{children:["Any filter payload regex can capture ",(0,i.jsx)(s.code,{children:"context"})," via capture group names."]}),"\n",(0,i.jsx)(s.p,{children:"This will be added as info to the report details."}),"\n",(0,i.jsx)(s.p,{children:"This can e.g. be used to capture file names transferred or similar dynamic data."}),"\n",(0,i.jsx)(s.p,{children:"Context values collected are stored as per detected sequence in a key/value storage.\nThe capture group name is used as the key of the key/value storage.\nIf multiple values are capture with the same name only the last value is stored."}),"\n",(0,i.jsxs)(s.admonition,{type:"info",children:[(0,i.jsx)(s.p,{children:"Capture group names starting with '_' are treated in a special way:"}),(0,i.jsx)(s.p,{children:"If they are captured multiple times they need to match the first captured value otherwise the sequence is aborted with an error."})]}),"\n",(0,i.jsx)(s.p,{children:"TODO add examples showing how this can be used to enfores that e.g. returned handles are the same for a request."}),"\n",(0,i.jsx)(s.h2,{id:"rest-query-sequence-return-values",children:"REST query sequence return values"}),"\n",(0,i.jsxs)(s.p,{children:["todo describe ",(0,i.jsx)(s.code,{children:"seqSummary"})]}),"\n",(0,i.jsx)(s.h2,{id:"using-sequences",children:"Using sequences"}),"\n",(0,i.jsxs)(s.p,{children:["The intended way to use sequences with fishbones is to define them as part of the upper or lower badge for a root cause.\nAs soon as the root cause is visible the sequence detection will be executed automatically and the summary shown as part of the ",(0,i.jsx)(s.a,{href:"/docs/badges",children:"badge"})]}),"\n",(0,i.jsx)(s.p,{children:"To do so use a badge with"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"extension dlt-logs rest query"}),"\n",(0,i.jsxs)(s.li,{children:["edit the sequence manually or via ",(0,i.jsx)(s.code,{children:"EDIT IN NOTEBOOK"})]}),"\n",(0,i.jsxs)(s.li,{children:["use json path: ",(0,i.jsx)(s.code,{children:"$.data[*]"})]}),"\n",(0,i.jsx)(s.li,{children:"use javascript function:"}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"const summaries=result.filter((t)=>t.type==='seqSummary').map((d)=>d.attributes)\nreturn ''+summaries.map((s)=>`${s.name}:${s.summary}`).join(',')\n"})}),"\n",(0,i.jsx)(s.p,{children:"This will show the sequence execution summaries as part of the badge label."}),"\n",(0,i.jsx)(s.h3,{id:"full-report-via-dlt-logs-extension",children:"full report via dlt-logs extension"}),"\n",(0,i.jsxs)(s.p,{children:["The full report for a sequence execution is available in the tree-view under ",(0,i.jsx)(s.code,{children:"Events"}),"/",(0,i.jsx)(s.code,{children:"Sequences"}),"/name and can be browsed there or exported in markdown format."]}),"\n",(0,i.jsx)(s.p,{children:"TODO: picture or link to dlt-logs docs."}),"\n",(0,i.jsx)(s.h3,{id:"full-report-via-fba-cli-tool",children:"full report via fba-cli tool"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"fba-cli"})," tool executes the full fishbone including the sequences and will contain a report in markdown format for the sequence."]}),"\n",(0,i.jsx)(s.p,{children:"TODO: ... more details, links, examples"}),"\n",(0,i.jsx)(s.h2,{id:"testing-sequence-definitions",children:"Testing sequence definitions"}),"\n",(0,i.jsx)(s.p,{children:"It's easiest to test the definition of the sequence and the execution by opening it in the fishbone/edit badges/notebooks. There you can execute it in real time."}),"\n",(0,i.jsx)(s.p,{children:"TODO ... add example picture."})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);